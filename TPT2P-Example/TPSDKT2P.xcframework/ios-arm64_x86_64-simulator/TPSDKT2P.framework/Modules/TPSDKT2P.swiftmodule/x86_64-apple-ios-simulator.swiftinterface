// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TPSDKT2P
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import CoreLocation
import Foundation
import PencilKit
import ProximityReader
import Swift
@_exported import TPSDKT2P
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol TPT2PReaderDelegate {
  func readerEventDidUpdated(event: (TPSDKT2P.TPT2PReader.Event)?)
  func startConfiguring(reader: TPSDKT2P.TPT2PReader)
  func endConfiguring(reader: TPSDKT2P.TPT2PReader, error: TPSDKT2P.TPT2PError?)
}
@objc @_inheritsConvenienceInitializers public class TPT2PReader : ObjectiveC.NSObject {
  public var delegate: (any TPSDKT2P.TPT2PReaderDelegate)?
  public var readerIdentifier: Swift.String? {
    get async throws
  }
  public static var isReaderBinded: Swift.Bool {
    get
  }
  public static func shared() -> TPSDKT2P.TPT2PReader
  @objc deinit
  public func configureReader() async throws
  public func readCardAndAuthorization(amount: Foundation.Decimal, installmentCode: Swift.String? = nil, orderNumber: Swift.String? = nil, bankTransactionId: Swift.String? = nil, extensions: Swift.Dictionary<Swift.String, Any>? = nil) async throws -> TPSDKT2P.Transaction?
  public func cancelReadProcess() async throws
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TPT2PReaderButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var onClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public enum TPT2PError : Swift.Error, Swift.Sendable, Swift.Equatable {
  case readerNotFound
  case versionCheckFailed
  case sdkVersionNotSupported
  case tokenRefreshFail
  case tokenRevoked
  case gpsDisabled
  case locationNotAllowed
  case transactionFailed
  case invalidParameterLength
  case cancelReadFailed
  case requestFailed(Swift.String?)
  case emptySDKToken
  case notAllowed
  case backgroundRequestNotAllowed
  case unsupported
  case osVersionNotSupported
  case modelNotSupported
  case passcodeDisabled
  case networkError
  case networkAuthenticationError
  case serviceConnectionError
  case notReady
  case emptyReaderToken
  case invalidReaderToken(Swift.String?)
  case prepareFailed(Swift.String?)
  case prepareExpired
  case tokenExpired
  case deviceBanned(Foundation.Date?)
  case readerMemoryFull
  case readerBusy
  case accountNotLinked
  case accountAlreadyLinked
  case accountLinkingFailed
  case accountLinkingRequiresiCloudSignIn
  case accountLinkingCancelled
  case merchantBlocked
  case invalidMerchant
  case readNotAllowed
  case readFromBackgroundError
  case readerServiceConnectionError
  case readerServiceError
  case noReaderSession
  case readerSessionExpired
  case readerTokenExpired
  case readerSessionNetworkError
  case readerSessionAuthenticationError
  case readerSessionBusy
  case readCancelled
  case invalidAmount
  case invalidCurrencyCode
  case nfcDisabled
  case readNotAllowedDuringCall
  case cardReadFailed
  case vasReadFail
  case paymentReadFailed
  case paymentCardDeclined
  public static func == (a: TPSDKT2P.TPT2PError, b: TPSDKT2P.TPT2PError) -> Swift.Bool
}
extension TPSDKT2P.TPT2PError {
  public var errorName: Swift.String {
    get
  }
}
public enum Environment {
  case sandbox
  case production
  public static func == (a: TPSDKT2P.Environment, b: TPSDKT2P.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Language {
  case en
  case zh
  public static func == (a: TPSDKT2P.Language, b: TPSDKT2P.Language) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TPT2PManager : ObjectiveC.NSObject {
  public var merchantInfo: TPSDKT2P.MerchantInfo?
  public var language: TPSDKT2P.Language?
  public var minimumSDKVersion: Swift.String?
  public var minimumiOSVersion: Swift.String?
  public var latestSDKVersion: Swift.String?
  public static func shared() -> TPSDKT2P.TPT2PManager
  public static func currentVersion() -> Swift.String
  public static func setupWithAppKey(appKey: Swift.String!, environment: TPSDKT2P.Environment!, partnerAccount: Swift.String? = nil, isInherit: Swift.Bool? = nil) async throws
  @objc deinit
}
extension TPSDKT2P.TPT2PManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  public func getCurrentLocation() -> CoreLocation.CLLocation?
}
@_hasMissingDesignatedInitializers public class TPT2PService {
  public static func shared() -> TPSDKT2P.TPT2PService
  public func refreshToken() async throws
  public func getBindingList(page: Swift.Int, countPerPage: Swift.Int, acquirerMerchantId: Swift.String? = nil, acquirerTerminalId: Swift.String? = nil) async throws -> [TPSDKT2P.BindItem]?
  public func bind(bindItem: TPSDKT2P.BindItem, description: Swift.String?) async throws
  public func bindDelete() async throws
  public func createElectronicSignature(receiptIdentifier: Swift.String, signCanvas: PencilKit.PKCanvasView) async throws
  public func getReceipt(receiptIdentifier: Swift.String, type: Swift.Int? = nil, email: Swift.String?) async throws -> Swift.String?
  public func getReceiptList(transactionIdentifier: Swift.String, transactionType: [TPSDKT2P.TransactionType]? = nil) async throws -> TPSDKT2P.ReceiptList?
  public func getMinimumVersions() async throws -> TPSDKT2P.Version?
  public func getInstallmentInfo() async throws -> [TPSDKT2P.IssuerItem]?
  @objc deinit
}
public enum TransactionCardType : Swift.Codable {
  case UNKNOWN
  case VISA
  case MASTERCARD
  case JCB
  case UCARD
  case AMEX
  public static func == (a: TPSDKT2P.TransactionCardType, b: TPSDKT2P.TransactionCardType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public let receiptId: Swift.String
  public let transactionId: Swift.String
  public let bankTransactionId: Swift.String?
  public let orderNumber: Swift.String?
  public let state: Swift.Int
  public let createTime: Swift.CLong
  public let amount: Swift.Double
  public let currency: Swift.String
  public let cardMask: Swift.String
  public let authCode: Swift.String
  public let needSignature: Swift.Bool
  public var authCardType: TPSDKT2P.TransactionCardType {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionLocation : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Version : Swift.Codable {
  public let minOsVersion: Swift.String
  public let minSdkVersion: Swift.String
  public let latestSdkVersion: Swift.String
  public let minAppVersion: Swift.String
  public let latestAppVersion: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BindList : Swift.Codable {
  public var itemList: [TPSDKT2P.BindItem] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BindItem : Swift.Codable {
  public let terminalId: Swift.Int
  public let partnerId: Swift.Int
  public let acquirerId: Swift.Int
  public let acquirerName: Swift.String
  public let acquirerIcon: Swift.String
  public let acquirerMerchantId: Swift.String
  public let acquirerTerminalId: Swift.String
  public let type: Swift.Int
  public let name: Swift.String?
  public let description: Swift.String?
  public init(terminalId: Swift.Int, partnerId: Swift.Int, acquirerId: Swift.Int, acquirerName: Swift.String, acquirerIcon: Swift.String, acquirerMerchantId: Swift.String, acquirerTerminalId: Swift.String, type: Swift.Int, name: Swift.String?, description: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Installment : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public var itemList: [TPSDKT2P.IssuerItem] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct IssuerItem : Swift.Codable {
  public let issuerCode: Swift.String?
  public let name: Swift.String?
  public let displayName: Swift.String?
  public let icon: Swift.String?
  public let codes: [TPSDKT2P.CodeItem]?
  public init(issuerCode: Swift.String?, name: Swift.String?, displayName: Swift.String?, icon: Swift.String?, codes: [TPSDKT2P.CodeItem]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CodeItem : Swift.Codable {
  public let code: Swift.String
  public let period: Swift.Int
  public let name: Swift.String
  public let description: Swift.String?
  public init(code: Swift.String, period: Swift.Int, name: Swift.String, description: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiErrorResponse : Swift.Codable, Swift.Error {
  public let traceId: Swift.String
  public let errorCode: Swift.Int
  public let errorMessage: Swift.String
  public let errorDetail: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TransactionType : Swift.Int, Swift.Codable {
  case sale
  case void
  case refund
  case voidRefund
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ReceiptList : Swift.Codable {
  public var itemList: [TPSDKT2P.ReceiptItem] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReceiptItem : Swift.Codable {
  public let receiptId: Swift.String?
  public let transactionType: TPSDKT2P.TransactionType?
  public let createTime: Swift.CLong?
  public let amount: Swift.Double?
  public let currency: Swift.String?
  public let needSignature: Swift.Bool?
  public let receiptUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension TPSDKT2P.TPT2PReader {
  public enum Event : Swift.Sendable, Swift.Equatable {
    case updateProgress(Swift.Int)
    case notReady
    case readyForTap
    case cardDetected
    case removeCard
    case readCompleted
    case readRetry
    case readCancelled
    case readNotCompleted
    case pinEntryRequested
    case pinEntryCompleted
    @available(iOS 16.4, *)
    case userInterfaceDismissed
    public var name: Swift.String {
      get
    }
    public static func == (a: TPSDKT2P.TPT2PReader.Event, b: TPSDKT2P.TPT2PReader.Event) -> Swift.Bool
  }
}
public struct MerchantInfo : Swift.Codable {
  public let partnerName: Swift.String?
  public let acquirerName: Swift.String?
  public let acquirerIcon: Swift.String?
  public let terminalId: Swift.String?
  public let description: Swift.String?
  public let partnerIcon: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension TPSDKT2P.Environment : Swift.Equatable {}
extension TPSDKT2P.Environment : Swift.Hashable {}
extension TPSDKT2P.Language : Swift.Equatable {}
extension TPSDKT2P.Language : Swift.Hashable {}
extension TPSDKT2P.TransactionCardType : Swift.Equatable {}
extension TPSDKT2P.TransactionCardType : Swift.Hashable {}
extension TPSDKT2P.TransactionType : Swift.Equatable {}
extension TPSDKT2P.TransactionType : Swift.Hashable {}
extension TPSDKT2P.TransactionType : Swift.RawRepresentable {}
