// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TPSDKT2P
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreLocation
import Foundation
import PencilKit
import ProximityReader
import Swift
@_exported import TPSDKT2P
import TPT2PModel
import UIKit
import _Concurrency
import _StringProcessing
public protocol TPT2PReaderDelegate {
  func readerEventDidUpdated(event: (TPSDKT2P.TPT2PReader.Event)?)
}
@objc @_inheritsConvenienceInitializers public class TPT2PReader : ObjectiveC.NSObject {
  public var delegate: (any TPSDKT2P.TPT2PReaderDelegate)?
  #if compiler(>=5.3) && $EffectfulProp
  public var readerIdentifier: Swift.String? {
    get async throws
  }
  #endif
  public static func shared() -> TPSDKT2P.TPT2PReader
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func configureReader() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readCard(for amount: Foundation.Decimal) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readCardAndAuthorization(for amount: Foundation.Decimal) async throws -> TPT2PModel.Transaction?
  #endif
  @objc override dynamic public init()
}
public enum TPT2PError : Swift.Error, Swift.Sendable, Swift.Equatable {
  case tokenRefreshFail
  case tokenRevoked
  case retry
  case gpsDisabled
  case locationNotAllowed
  case transactionFailed
  case requestFailed(Swift.String?)
  case notAllowed
  case backgroundRequestNotAllowed
  case unsupported
  case osVersionNotSupported
  case modelNotSupported
  case passcodeDisabled
  case networkError
  case networkAuthenticationError
  case serviceConnectionError
  case notReady
  case emptyReaderToken
  case invalidReaderToken(Swift.String?)
  case prepareFailed(Swift.String?)
  case prepareExpired
  case tokenExpired
  case deviceBanned(Foundation.Date?)
  case readerMemoryFull
  case readerBusy
  case accountNotLinked
  case accountAlreadyLinked
  case accountLinkingFailed
  case accountLinkingRequiresiCloudSignIn
  case accountLinkingCancelled
  case merchantBlocked
  case invalidMerchant
  case readNotAllowed
  case readFromBackgroundError
  case readerServiceConnectionError
  case readerServiceError
  case noReaderSession
  case readerSessionExpired
  case readerTokenExpired
  case readerSessionNetworkError
  case readerSessionAuthenticationError
  case readerSessionBusy
  case readCancelled
  case invalidAmount
  case invalidCurrencyCode
  case nfcDisabled
  case readNotAllowedDuringCall
  case cardReadFailed
  case vasReadFail
  case paymentReadFailed
  case paymentCardDeclined
  public static func == (a: TPSDKT2P.TPT2PError, b: TPSDKT2P.TPT2PError) -> Swift.Bool
}
public enum Environment {
  case sandbox
  case production
  public static func == (a: TPSDKT2P.Environment, b: TPSDKT2P.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Language {
  case en
  case zh
  public static func == (a: TPSDKT2P.Language, b: TPSDKT2P.Language) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TPT2PManager : ObjectiveC.NSObject {
  public var merchantInfo: TPT2PModel.MerchantInfo?
  public var language: TPSDKT2P.Language?
  public var minimumSDKVersion: Swift.String?
  public var minimumiOSVersion: Swift.String?
  public var latestSDKVersion: Swift.String?
  public static func shared() -> TPSDKT2P.TPT2PManager
  #if compiler(>=5.3) && $AsyncAwait
  public static func setupWithAppKey(_ registeredAppKey: Swift.String!, _ environment: TPSDKT2P.Environment!) async throws
  #endif
  @objc deinit
}
extension TPSDKT2P.TPT2PManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  public func isLocationAuthroized() -> Swift.Bool
  public func getCurrentLocation() -> CoreLocation.CLLocation?
}
@_hasMissingDesignatedInitializers public class TPT2PService {
  public static func shared() -> TPSDKT2P.TPT2PService
  #if compiler(>=5.3) && $AsyncAwait
  public func refreshToken() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getBindingList(page: Swift.Int, countPerPage: Swift.Int) async throws -> [TPT2PModel.BindItem]?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func bind(bindItem: TPT2PModel.BindItem, description: Swift.String?) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func bindDelete() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func createElectronicSignature(receiptIdentifier: Swift.String, signCanvas: PencilKit.PKCanvasView) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getReceipt(receiptIdentifier: Swift.String, type: Swift.Int?, email: Swift.String?) async throws -> Swift.String?
  #endif
  @objc deinit
}
extension TPSDKT2P.TPT2PReader {
  public enum Event : Swift.Sendable, Swift.Equatable {
    case updateProgress(Swift.Int)
    case notReady
    case readyForTap
    case cardDetected
    case removeCard
    case readCompleted
    case readRetry
    case readCancelled
    case readNotCompleted
    case pinEntryRequested
    case pinEntryCompleted
    @available(iOS 16.4, *)
    case userInterfaceDismissed
    public var name: Swift.String {
      get
    }
    public static func == (a: TPSDKT2P.TPT2PReader.Event, b: TPSDKT2P.TPT2PReader.Event) -> Swift.Bool
  }
}
extension TPSDKT2P.Environment : Swift.Equatable {}
extension TPSDKT2P.Environment : Swift.Hashable {}
extension TPSDKT2P.Language : Swift.Equatable {}
extension TPSDKT2P.Language : Swift.Hashable {}
